
Document de la entrega 3 del projecte 1 de PROSO:

1. Disseny:
    
    Per a incloure la part de disc de la 3a entrega al nostre sistema operatiu hem inclòs, principalment, dues estructures de dades molt relacionades entre elles: ZeOSFAT i HardDisk.
ZeOSFAT es un array d'enters de tamany MAX_BLOCKS (definit com 50 per res en especial, simplement ens vam posar d'acord en que era un bon numero) que ens indica els enllaços entre els blocks que tenim a HardDisk, sent aquest una matriu de Bytes. En concret la matriu es de tamany MAX_BLOCK*BLOCK_SIZE (256 -> definit per vosaltres) Bytes.

Parlant ara de la gestió dels blocks, tenim també una variable free_block que ens marca l'index dins de la FAT del primer block dels blocks lliures (no ha de ser exactament el block lliure amb l'index més baix dins de ZeOSFAT). Aquest block al que apunta free_block apunta a la vegada a un altre block lliure i així fins a arribar a l'ultim lliure que pendrá per valor EOF (-1). Així doncs, els blocks lliures es com si formessin un gran (o no, segons com estigui d'ocupat el disc) fitxer ja que tots els blocks lliures estan enllaçats entre ells. De mateixa forma estan enllaçats els blocks de disc utilitzats per un mateix fitxer, acabant amb un block amb valor EOF. En el cas que free_block prengui per valor EOF significarà que no tenim espai lliure.

------------------>(Respecto 2ª entrega añadica TC en la task_struct, exit cierra la TC, fork clona TC, initTask0 abre canal 0, 1, 2 (DISPLAY, KEYBOARD), write modificado para dependiente).

Les operacions de gestió de disc són Alloc_Block i Free_Blocks a més de InitZeOSFat: 
    -La funció Alloc_Block ens retorna un block lliure i actualitza els blocks lliures del disc.
    -La operació Free_Blocks rep un block com a paràmetre (l'index d'aquest dins de la FAT) i allibera aquest block a més de, en el cas que tingui, els següents blocks que estiguin enllaçats amb aquest. Per a actualitzar l'espai lliure, el free_block passa a apuntar al block que ens passen per paràmetre i l'ultim de la cadena que volem alliberar passa a apuntar l' anterior free_block. Així fem fàcilment i manera consistent la gestió de l' espai lliure.
    -La funció InitZeOSFat inicialitza la FAT amb tots els blocks enllaçats entre ells ja que están tots lliures, inicialitza el directori '/' amb les DIR_ENTRIES entrades lliures i inicialitza el Disc amb zeros.

A més d'aquestes operacions, algunes syscalls han estat modificades per a incloure la possibilitat d'utilitzar el disc i s'han afegit noves operacions auxiliars com, per exemple, createFile, que et crea un nou fitxer (només a l'open amb la opció O_CREAT) i li reserva un espai al disc.

--------------->(Comentar buffer circular, y sus operaciones, como estan enlazadas TC, TFO y Descriptor de dispositivo)

Pseudocodi?¿???¿??¿?¿?¿???

2. Implementació:

--------------->(funciones inline, Problemas y solución)

3. Descripció de les proves realitzades:


 
